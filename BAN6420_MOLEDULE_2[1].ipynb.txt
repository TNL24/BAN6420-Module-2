{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30033000-04c0-4e9b-b343-0f54efd4433c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "\n",
    "# adapt data path to my environment\n",
    "\n",
    "salary_data = pd.read_csv(\"C:/Users/Ogbemudia/Music/OneDrive/Documents/salaries for San Francisco.csv\")\n",
    "\n",
    "def get_employee_details(name):\n",
    "    try:\n",
    "        employee_details = salary_data[salary_data['Name'] == name].to_dict(orient='records')[0]\n",
    "        return employee_details\n",
    "    except IndexError:\n",
    "        return f\"No employee found with the name {name}\"\n",
    "    \n",
    "    employee_details_dict = {}\n",
    "\n",
    "for index, row in salary_data.iterrows():\n",
    "    # Assuming the first column is the employee ID or unique identifier\n",
    "    employee_id = row.iloc[0]  # Adjust if needed\n",
    "\n",
    "    # Create a dictionary for each employee\n",
    "    employee_details_dict[employee_id] = {\n",
    "         \"EmployeeName\": row.iloc[0],  # Assuming the second column is the employee name\n",
    "        \"JobTitle\": row.iloc[1],  # Assuming the third column is the job title\n",
    "        \"BasePay\": row.iloc[2],  # Assuming the fourth column is the Base Pay\n",
    "        # Add other relevant details as needed\n",
    "    }\n",
    "\n",
    "# Now you can use the dictionary for analysis, manipulation, etc.\n",
    "    \n",
    "def get_employee_details(employee_name):\n",
    "    global salary_data\n",
    "\n",
    "    try:\n",
    "        employee_details = salary_data.loc[salary_data[\"Name\"] == employee_name].to_dict(\"records\")[0]\n",
    "        return employee_details\n",
    "    except IndexError:\n",
    "        print(f\"Employee '{employee_name}' not found in data.\")\n",
    "        return None\n",
    "    except KeyError as e:\n",
    "        print(f\"Error: Invalid key '{e}' in employee data.\")\n",
    "        return None\n",
    "\n",
    "# Use try-except blocks in other functions as needed\n",
    "    \n",
    "import os\n",
    "import csv\n",
    "\n",
    "def export_employee_details(employee_name):\n",
    "    employee_details = get_employee_details(employee_name)\n",
    "\n",
    "    if employee_details:\n",
    "        try:\n",
    "            os.mkdir(\"Employee Profile\")  # Create folder if it doesn't exist\n",
    "            with open(\"Employee Profile/details.csv\", \"w\", newline=\"\") as f:  # Added closing parenthesis\n",
    "                writer = csv.DictWriter(f, fieldnames=employee_details.keys())\n",
    "                writer.writeheader()\n",
    "                writer.writerow(employee_details)  # Added missing closing parenthesis\n",
    "        except Exception as e:  # Handle potential errors\n",
    "            print(f\"Error exporting employee details: {e}\")\n",
    "            return None  # Optional: return None to indicate failure"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
